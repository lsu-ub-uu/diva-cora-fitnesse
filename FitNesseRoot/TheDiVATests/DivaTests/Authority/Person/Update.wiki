---
Test
---

!2 Uppdatera
Det ska vara möjligt att uppdatera Person.

En personpost innehåller en lista med länkar till personDomainParts. Ingen användare, oavsett roll, kommer att kunna ändra i listan på länkade personDomainParts. För att kunna lägga till eller ta bort länkade personDomainParts i personposten behöver man skapa eller radera personDomainParts. Server kommer då att lägga till respektive ta bort personDomainPart från listan i personposten, via id:et från den personDomainPart som skapas eller tas bort.

!3 Person
 * '''Fall 1:''' Det ska gå att uppdatera en person
   * Det ska inte gå att ändra listan på domäner (i recordInfo) och ej heller listan på kopplade personDomainParts.
 * '''Fall 1A:''' Det ska gå att uppdatera fältet "public" i en person. !style_red[(Ej implementerad)]
   * Det uppdaterade fältet public ska uppdateras i alla relaterade person domän delar
 * '''Fall 1B:''' Om fältet "ORCID" uppdateras men den redan finns i en publikation i classic (sök i classic), skall ORCID inte uppdateras utan vara oförändrad !style_red[(Ej implementerad)]

!3 !-Person domän delen-!
Uppdatering av den totala informationen om en person görs genom att personposten uppdateras, eller genom att relaterade personDomainParts läggs till, uppdateras eller tas bort. Därför finns här information om de olika fall som vi behövar ta hänsyn till när man förändrar personDomainParts, genom att lägga till, uppdatera eller ta bort dem.

!4 Lägg till en person domän del
 * '''Fall 2:''' Det ska gå att lägga till en ny person domän del till en befintligt person. (Create personDomainPart).
   * Personposthistoriken utökas med en ny update.
   * Den nya personDomainParten läggs till i listan med länkade person domän delar i personposten.
   * Domänen som personDomainPart tillhör läggs till i domän listan i personposten
   * Värdet på fältet "public" kopieras från person till den nya person domän delen
 * '''Fall 2A:''' Det ska inte gå att lägga till en ny personDomainPart med ett id som inte matchar en befintligt person.!style_red[(Ej implementerad)]
   * Om inte id:et på personDomainPart matchar en befintlig personpost, skall servern svara med BAD_REQUEST
 * '''Fall 2B:''' Det ska inte gå att lägga till en ny personDomainPart, där varken "identifier" eller "affiliation" finns med. !style_red[(Ej implementerad)]
   * Saknas både "identifier" och "affiliation" skall servern svara med BAD_REQUEST
 * '''Fall 2C:''' En personDomainPart kan bara ha EN relaterad person. !style_red[(Ej implementerad)]

!4 Uppdatera en person domän del
 * '''Fall 3:''' Det ska gå att uppdatera person domän delen (personDomainParts) !style_red[(Ej implementerad)]
   * Personposthistoriken utökas med en ny update.
 * '''Fall 3B:''' Det ska inte gå att uppdatera en  personDomainPart, där varken "identifier" eller "affiliation" finns med. !style_red[(Ej implementerad)]
   * Saknas både "identifier" och "affiliation" skall servern svara med BAD_REQUEST
 * '''Fall 3A:''' Om fältet "lokalt id" uppdateras men det redan finns i en publikation (sök i classic), skall lokalt id inte uppdateras utan vara oförändrat. !style_red[(Ej implementerad)]

!4 Ta bort en person domän del
 * '''Fall 4:''' Det ska gå att ta bort en person domän del från en befintligt person. (Delete personDomainPart).  !style_red[(Ej implementerad)]
   * Personposthistoriken loggas med en ny update.
   * Person domän delen tas bort från listan med länkade person domän delar i personposten.
   * Domän som personDomainPart tillhör tas bort från domän listan i personposten
 * '''Fall 4A:''' Det skall inte gå att ta bort en personDomainPart där fältet "lokalt id" redan finns i en publikation (sök i classic).!style_orange['''Stämmer detta fall?''']!style_red[(Ej implementerad)]

*Försöker man ta bort en personDomainPart där "lokalt id" finns i en publikation, skall servern svara med BAD_REQUEST.

!3 Synkronisering with classic
 * '''Fall 5:''' När en personpost uppdateras, ska personposten synchronizeras och indexeras i Classic
 * '''Fall 6:''' När en person domän del skapas, ska den relaterade personposten synchronizeras och indexeras i Classic !style_red[(Ej implementerad)]
 * '''Fall 7:''' När en person domän del uppdateras, ska den relaterade personposten synchronizeras och indexeras i Classic !style_red[(Ej implementerad)]
 * '''Fall 8:''' När en person domän del tas bort, ska den relaterade personposten synchronizeras och indexeras i Classic !style_red[(Ej implementerad)]

!***> Fall 1

!define currentAuthToken {$adminAuthToken}
!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPerson106
!define expectedUpdateResult {OK}
!define expectedAnswer {}
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing. Write permission personDomainPart is missing.        }
!include -seamless .HelperPages.updateCheckReadCheckReadCheckReset
*!
!***> Fall 2

!define currentAuthToken {$adminAuthToken}
!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPersonDomainPart106Kth
#update

!define expectedUpdateResult {OK}
!define expectedAnswer {}
#Compare

!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission public is missing. Write permission domain is missing.}
!include -seamless .HelperPages.updateCheckReadCheckReadCheckReset
*!
!***> Fall 3 Ta bort authority-person:106:test från personen authority-person:106 EJ IMPLEMENTERAD

#!define currentAuthToken {$adminAuthToken}

#!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPerson106-RemovePersonDomainPart

#update

#!define expectedUpdateResult {OK}

#!define expectedAnswer {}

#Compare

#!define expectedCompareResult {Ok}

#!define expectedActionResult {Action read_incoming_links is missing.}

#!define expectedPermissionResult {Write permission domain is missing.}

*!
!***> Fall 4 Lägga till authority-person:106:test till personen authority-person:106 EJ IMPLEMENTERAD

#!define currentAuthToken {$adminAuthToken}

#!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPerson106

#update

#!define expectedUpdateResult {OK}

#!define expectedAnswer {}

#Compare

#!define expectedCompareResult {OK}

#!define expectedActionResult {Action read_incoming_links is missing.}

#!define expectedPermissionResult {Write permission domain is missing.}

#!include -seamless .HelperPages.updateCheckReadCheckReadCheckReset

*!
!3 Roller
!4 !-SystemAdmin-!
!-SystemAdmin får ändra alla person och personDomainParts från alla domäner.-!

 * '''Fall 1:''' !-SystemAdmin ska kunna uppdatera en person från alla domäner.-!
 * '''Fall 2:''' !-SystemAdmin ska kunna uppdatera en personDomainParts från alla domäner.-!

!4 !-DomainAdmin-!
!-DomainAdmin får uppdatera alla personer men bara kunna uppdatera personDomainParts som tillhör sin egen domän.-!

 * '''Fall 1:''' !-DomainAdmin ska kunna uppdatera en person från alla domäner.-!
 * '''Fall 2:''' !-DomainAdmin ska kunna uppdatera en personDomainParts från sin egen domän.-!
 * '''Fall 3:''' !-DomainAdmin ska INTE kunna uppdatera en personDomainParts från sin egen domän.-!

!4 Guest
!-Guest får INTE uppdatera personer och inte heller personDomainParts-!

 * '''Fall 1:''' Guest får INTE uppdatera personer.
 * '''Fall 2:''' Guest får INTE uppdatera personeDomainPart.

!***> Fall 1

!define currentAuthToken {$userAuthToken}
!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPerson106
!define expectedUpdateResult {FORBIDDEN}
!define expectedAnswer {}
Update the record

!include -seamless .HelperPages.updateRecord
*!
!***> Fall 2

!define currentAuthToken {$userAuthToken}
!include -seamless .TheDiVATests.DivaTests.Authority.Person.data.dataPersonDomainPart106Test
!define expectedUpdateResult {FORBIDDEN}
!define expectedAnswer {}
Update the record

!include -seamless .HelperPages.updateRecord
*!
