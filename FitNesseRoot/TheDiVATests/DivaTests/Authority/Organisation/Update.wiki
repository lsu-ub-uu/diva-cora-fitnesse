---
Test
---
!2 Uppdatera
Det ska vara möjligt att uppdatera Organisation.

!style_red[Det är inte implementerat att spara domain i databasen från DiVA powered by Cora]
 * '''Fall 1:''' Det ska gå att uppdatera rootOrganisation
 * '''Fall 2:''' Det ska gå att uppdatera topOrganisation
 * '''Fall 3:''' Det ska gå att uppdatera subOrganisation

!define currentAuthToken {$adminAuthToken}

!***> '''Fall 1'''
!-Uppdatera en rootOrganisation från domän UU, som en divaFitnesseEverything och se att alla fält är uppdaterade, utom domain som inte går att ändra.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1748NoDomainChange
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset
*!
!***> '''Fall 2'''

!-Uppdatera en topOrganisation från domän UU, som en divaFitnesseEverything och se att alla fält är uppdaterade, utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset
*!
!***> '''Fall 3'''

!-Uppdatera en subOrganisation från domän UU, som en divaFitnesseEverything och se att alla fält är uppdaterade, utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {OK}
!define expectedActionResult {Action read_incoming_links is missing.}
!define expectedPermissionResult {}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset
*!

!3 Data valideringar
!4 Överordnad och tidigare organisation
!-Överordnad organisation på en topOrganisation kan bara vara en rootOrganisation-!

 * '''Fall 1a:''' !-Linked recordType är topOrganisation-!
 * '''Fall 1b:''' !-Linked recordType är rootOrganisation men recordId pekar på en topOrganisation-!
 * '''Fall 1c:''' !-Linked recordType är subOrganisation-!
 * '''Fall 1d:''' !-Linked recordType är rootOrganisation men recordId pekar på en subOrganisation-!

!***> '''Fall 1a'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1756"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: [DataRecordLink with nameInData:organisationLink must have an recordType:rootOrganisation]}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 1b'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1756"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: linkedRecord does not exists in storage for recordType: rootOrganisation and recordId: 1756}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 1c'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: [DataRecordLink with nameInData:organisationLink must have an recordType:rootOrganisation]}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 1d'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1455"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: linkedRecord does not exists in storage for recordType: rootOrganisation and recordId: 1455}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!

!-Överordnad organisation på en subOrganisation kan det bara vara en topOrganisation eller en annan subOrganisation-!

 * '''Fall 2a:''' !-Linked recordType är rootOrganisation-!
 * '''Fall 2b:''' !-Linked recordType är topOrganisation men recordId pekar på en ej topOrganisation-!
 * '''Fall 2c:''' !-Linked recordType är subOrganisation men recordId pekar på en ej subOrganisation-!

!***> '''Fall 2a''' !style_red[Ej implementerad id DiVA powered by Cora.]
#!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1748"}]}],"repeatId":"0"}-!}
#!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
#!define updateData  customUpdateData
#!define expectedUpdateResult {BAD_REQUEST}
#!define expectedAnswer {Data is not valid: [DataRecordLink with nameInData:organisationLink must have an recordType:rootOrganisation]}
#!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2b''' 
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1748"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: linkedRecord does not exists in storage for recordType: topOrganisation and recordId: 1748}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2c''' 
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1748"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedUpdateResult {BAD_REQUEST}
!define expectedAnswer {Data is not valid: linkedRecord does not exists in storage for recordType: subOrganisation and recordId: 1748}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!

!style_orange[!-TidigareOrganisation kan länkas till vilken organisationstyp som helst (rotOrganisation, topOrganisation, subOrganisation) och därför behöver inte utföra några extra test här.-!]


!4 Överordnad och tidigare organisation ska vara från samma domän

 * '''Fall 1a:''' !-Det ska inte gå att lägga till en överordnad organisation som är från en annan domän, på en topOrganisation-!
 * '''Fall 1b:''' !-Det ska inte gå att lägga till en överordnad organisation som är från en annan domän, på en subOrganisation-!
 * '''Fall 2a:''' !-Det ska inte gå att lägga till en tidigare organisation som är från en annan domän, på en topOrganisation-!
 * '''Fall 2b:''' !-Det ska inte gå att lägga till en tidigare organisation som är från en annan domän, på en subOrganisation-!

!define expectedUpdateResult {BAD_REQUEST}

!***> '''Fall 1a'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1749"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Links to organisations from another domain is not allowed.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 1b'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1751"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Links to organisations from another domain is not allowed.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2a'''
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1749"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Links to organisations from another domain is not allowed.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2b'''
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1751"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Links to organisations from another domain is not allowed.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!

!4 Ingen relation till sig själv
 * '''Fall1a:''' !-Det ska inte gå att uppdatera en organisation så att den får sig själv som överordnad organisation, på en topOrganisation-!
 * '''Fall1b:''' !-Det ska inte gå att uppdatera en organisation så att den får sig själv som överordnad organisation, på en subOrganisation-!
 * '''Fall2a:''' !-Det ska inte gå att uppdatera en organisation så att den får sig själv som tidigare organisation, på en topOrganisation-!
 * '''Fall2b:''' !-Det ska inte gå att uppdatera en organisation så att den får sig själv som tidigare organisation, på en subOrganisation-!

!define expectedUpdateResult {BAD_REQUEST}

!***> '''Fall 1a'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1750"}]}]}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Data is not valid: [DataRecordLink with nameInData:organisationLink must have an recordType:rootOrganisation]}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 1b'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to link to self}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2a'''
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to link to self}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2b'''
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to link to self}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!

!4 Samma organisation får inte finnas mer än en gång i parent eller predecessor listorna
TopOrganisation får bara ha en överordnad organisation, därför behöver vi inte kolla detta här.

 * '''Fall 1:''' !-Det ska inte gå att lägga till samma organisation som överordnad mer än en gång, på en subOrganisation. Två nya lika överordnad organisationer skickas med.-!
 * '''Fall 2a:''' !-Det ska inte gå att lägga till samma organisation som tidigare organisation mer än en gång, på en topOrganisation. Två nya lika tididgare organisationer skickas med.-!
 * '''Fall 2b:''' !-Det ska inte gå att lägga till samma organisation som tidigare organisation mer än en gång, på en subOrganisation. Två nya lika tididgare organisationer skickas med.-!
 * '''Fall 3a:''' !-Det ska inte gå att lägga till samma organisation som föregående och överordnad samtidigt, på en topOrganisation. Det ska inte gå att göra det.-!
 * '''Fall 3b:''' !-Det ska inte gå att lägga till samma organisation som tidigare och överordnad samtidigt, på en subOrganisation. Det ska inte gå att göra det.-!

!style_orange[INFO: För att testa fall ett och två vi änvänder oss av ett regex för att hitta att det BARA finns EN förekomst av parent/predecessor i svaret på update anropet.]

!***> '''Fall 1'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"0"},{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"1"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {=~/^(?:(?!"parentOrganisation").)*"parentOrganisation"(?!.*"parentOrganisation").*$/}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!
!***> '''Fall 2a'''

!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1756"}]}],"repeatId":"0"},{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"topOrganisation"},{"name":"linkedRecordId","value":"1756"}]}],"repeatId":"1"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {=~/^(?:(?!"earlierOrganisation").)*"earlierOrganisation"(?!.*"earlierOrganisation").*$/}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!
!***> '''Fall 2b'''
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"},{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"1"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {=~/^(?:(?!"earlierOrganisation").)*"earlierOrganisation"(?!.*"earlierOrganisation").*$/}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!
!***> '''Fall 3a'''

!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1748"}]}]},{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"rootOrganisation"},{"name":"linkedRecordId","value":"1748"}]}],"repeatId":"1"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to same parent and predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!
!***> '''Fall 3b'''
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"},{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"1"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to same parent and predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!

!4 Cirkuläraberoenden
 * '''Fall 1a:''' !-Cirkuläraberoenden via parent, parent pekar direkt tillbaka på uppdaterad organisation. Det gäller BARA suborganisationer.-!
 * '''Fall 1b:''' !-Cirkuläraberoenden via parent, i flera steg.-!
 
 * '''Fall 2a:''' !-Cirkuläraberoenden via earlier, tidigare pekar direkt tillbaka på uppdaterad organisation.-!
 * '''Fall 2b:''' !-Cirkuläraberoenden via earlier, i flera steg.-!
 
 * '''Fall 3:''' !-Cirkuläraberoenden via kombination av parent och predecessor.-!

!***> '''Fall 1a'''
!-Vi kommer att länka subOrganisationer via överornad organisation 1454 --> 1455 --> 1454, detta skall inte gå att göra.-!

Vi länkar 1455 till 1454
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1454"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi försöker att länka 1455 till 1454. Det ska inte gå.
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to circular dependency with parent or predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> '''Fall 1b'''
!-Vi kommer att länka subOrganisationer via överornad organisation 1455 --> 1454 --> 1453 --> 1455, detta skall inte gå att göra.-!

!style_blue[Info] !-Det finns redan ett länk mellan 1455 --> 1455 från testet ovan.-!

Vi länkar 1454 till 1453
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1458"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi länkar 1453 till 1455. Det ska inte gå
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"subOrganisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1458NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to circular dependency with parent or predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> Återställ organisationer
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!

!***> '''Fall 2a'''
!-Vi kommer att länka organisationer via tidigare organisation 1750 --> 1454 --> 1750, detta skall inte gå att göra.-!

Vi länkar 1750 till 1454
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1454"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi försöker att länka 1455 till 1750. Det ska inte gå.
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to circular dependency with parent or predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> '''Fall 2b'''
!-Vi kommer att länka organisationer via tidigare organisation 1750 --> 1454 --> 1455 --> 1750, detta skall inte gå att göra.-!

!style_blue[Info] !-Det finns redan ett länk mellan 1750 --> 1454 från testet ovan.-!

Vi länkar 1454 till 1455
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi försöker att länka 1455 till 1750. Det ska inte gå.
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to circular dependency with parent or predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> Återställ organisationer
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!

!***> '''Fall 3'''
!-Vi kommer att länka organisationer via tidigare organisation 1750 --(E)--> 1454 --(E)--> 1455 --(P)--> 1750, detta skall inte gå att göra.-!
Dvs: 
 * det finns en tidigareorganisation relation mellan 1750 --> 1454
 * det finns en tidigareorganisation relation mellan 1454 --> 1455
 * det finns en överordnadorganisation relation mellan 1455 --> 1750
 
Vi länkar 1750 till 1454
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1454"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi länkar 1454 till 1455
!define customJsonPart {!-,{"name":"earlierOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1455"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {}
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

Vi länkar 1454 till 1750, det ska inte gå.
!define customJsonPart {!-,{"name":"parentOrganisation","children":[{"name":"organisationLink","children":[{"name":"linkedRecordType","value":"organisation"},{"name":"linkedRecordId","value":"1750"}]}],"repeatId":"0"}-!}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!define updateData  customUpdateData
!define expectedAnswer {Organisation not updated due to circular dependency with parent or predecessor}
!define expectedUpdateResult {BAD_REQUEST}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> Återställ organisationer
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1454NoDomainChange
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.resetRecord
*!

!3 Roller
!4 !-SystemAdmin-!
Systemadmin får uppdatera organisationer från alla domäner förutom fältet '''domain'''.

 * '''Fall 1:''' !-SystemAdmin ska kunna uppdatera en rootOrganisation från alla domäner.-!
 * '''Fall 2:''' !-SystemAdmin ska kunna uppdatera en topOrganisation från alla domäner.-!
 * '''Fall 3:''' !-SystemAdmin ska kunna uppdatera en subOrganisation från alla domäner.-!
 
!define currentAuthToken {$systemAdminAuthToken}

!***> '''Fall 1'''

!-Uppdatera en rootOrganisation från domän UU, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1748
!define expectedUpdateResult {OK}
!define expectedAnswer {}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset

!-Uppdatera en rootOrganisation från domän KTH, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1749
!define expectedUpdateResult {OK}
!define expectedAnswer {}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset

*!
!***> '''Fall 2'''

!-Uppdatera en topOrganisation från domän UU, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset

!-Uppdatera en topOrganisation från domän KTH, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1751
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset
*!
!***> '''Fall 3'''

!-Uppdatera en subOrganisation från domän UU, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset

!-Uppdatera en subOrganisation från domän KTH, som en systemAdmin och se att alla fält är uppdaterade utom domain som inte får ändras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1456
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset
*!

!4 !-DomainAdmin-!
!-DomainAdmin får BARA uppdatera subOrganisationer från sin egen domän.-!

 * '''Fall 1:''' !-DomainAdmin ska INTE kunna uppdatera en rootOrganisation oavsett domän.-!
 * '''Fall 2:''' !-DomainAdmin ska INTE kunna uppdatera en topOrganisation oavsett domän.-!
 * '''Fall 3:''' !-DomainAdmin ska INTE kunna uppdatera en subOrganisation från en annan domän.-!
 * '''Fall 4:''' !-DomainAdmin ska kunna uppdatera en subOrganisation från sin egna domän.-!

!***> '''Fall 1'''

!-Uppdatera en rootOrganisation från domän UU, som en domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1748
!define currentAuthToken {$domainAdminUUAuthToken}
!define expectedUpdateResult {FORBIDDEN}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

!-Uppdatera en rootOrganisation från domän KTH, som en domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1749
!define currentAuthToken {$domainAdminUUAuthToken}
!define expectedUpdateResult {FORBIDDEN}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 2'''

!-Uppdatera en topOrganisation från domän UU, som en UU domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750
!define currentAuthToken {$domainAdminUUAuthToken}
!define expectedUpdateResult {FORBIDDEN}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

!-Uppdatera en topOrganisation från domän KTH, som en UU domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1751
!define currentAuthToken {$domainAdminUUAuthToken}
!define expectedUpdateResult {FORBIDDEN}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 3'''

!-Uppdatera en subOrganisation från domän KTH, som en UU domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1456
!define currentAuthToken {$domainAdminUUAuthToken}
!define expectedUpdateResult {FORBIDDEN}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
!***> '''Fall 4'''

!-Uppdatera en subOrganisation från domän UU, som en UU domainAdmin och se att den får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1455
!define expectedUpdateResult {OK}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
!define expectedCompareResult {Child with nameInData domain does not have the correct value.}
!define expectedActionResult {Action delete is missing. Action index is missing. Action read_incoming_links is missing.}
!define expectedPermissionResult {Write permission domain is missing.}
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.checkReadCheckReset

*!

!4 Guest
 * '''Fall 1:''' Guest får INTE uppdatera rootOrganisationer oavsett domän.
 * '''Fall 2:''' Guest får INTE uppdatera topOrganisationer oavsett domän.
 * '''Fall 3:''' Guest får INTE uppdatera subOrganisationer oavsett domän.

!define currentAuthToken {$guestToken}
!define expectedUpdateResult {FORBIDDEN}

!***> '''Fall 1'''
!-Uppdatera en rootOrganisation från domän UU, som en domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataRootOrganisation1748
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> '''Fall 2'''
!-Uppdatera en topOrganisation från domän UU, som en UU domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataTopOrganisation1750
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord

*!
!***> '''Fall 3'''
!-Uppdatera en subOrganisation från domän KTH, som en UU domainAdmin och se att den inte får uppdateras.-!

!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.dataSubOrganisation1456
!include -seamless .TheDiVATests.DivaTests.Authority.Organisation.updateRecord
*!
